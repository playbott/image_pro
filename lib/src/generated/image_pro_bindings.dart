// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/image_pro.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ImageProBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImageProBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImageProBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> Test() {
    return _Test();
  }

  late final _TestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('Test');
  late final _Test = _TestPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  JPEGEncode_return JPEGEncode(
    ffi.Pointer<ffi.Void> b,
    int s,
    int pQuality,
  ) {
    return _JPEGEncode(
      b,
      s,
      pQuality,
    );
  }

  late final _JPEGEncodePtr = _lookup<
      ffi.NativeFunction<
          JPEGEncode_return Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('JPEGEncode');
  late final _JPEGEncode = _JPEGEncodePtr.asFunction<
      JPEGEncode_return Function(ffi.Pointer<ffi.Void>, int, int)>();
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.LongLong;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;

/// Return type for JPEGEncode
final class JPEGEncode_return extends ffi.Struct {
  external ffi.Pointer<ffi.Void> r0;

  @ffi.Int()
  external int r1;

  @ffi.Int()
  external int r2;
}
